<pre class='metadata'>
Title: Technical Specifications for IWA Digital Measurement, Reporting and Verification 
Shortname: data-schema
Level: 1
Status: LD
URL: https://github.com/InterWorkAlliance/TTF/dmrv/spec
Editor: Marley Gray (Microsoft), https://microsoft.com, marleyg@microsoft.com
Editor: 
Abstract: This document is the working specification for the IWA Digital MRV taskforce and is a work in progress.
Markup Shorthands: markdown yes, idl yes, dfn yes
Boilerplate: omit copyright, omit conformance
</pre>

# Introduction # {#intro}

This document is the working specification for the IWA Digital MRV taskforce and is a work in progress.

The aim of this document is to define a common data model, schema or data dictionary for the IWA Digital Measurement, Reporting and Verification (DMRV) taskforce.

Advisement:
  This specification is a work in progress and is subject to change. It is not a final or otherwise published version.

## Status of this Document ## {#status}

Comments regarding the document are welcome, please file issues directly on [GitHub](https://github.com/InterWorkAlliance/TTF/blob/dmrv-tf/dmrv/spec/index.bs).

THe technical specifications within this document are the result of consent processses by GBBC/IWA members and other external sources.

## Scope ## {#scope}

The scope of this document is to reach consensus on a common data model, schema or data dictionary for the IWA Digital Measurement, Reporting and Verification (DMRV) taskforce to represent the data entities involved in the origination process for the resulting digital assets.

## Intended Audience ## {#audience}

This technical specification is for

- software developers who want to build software to edit, exchange or store data in the format defined by this specification
- business analysts who want to understand the data model and data dictionary defined by this specification
- data scientists who want to understand the data model and data dictionary defined by this specification
- anyone else who wants to understand the data model and data dictionary defined by this specification

## About the Voluntary Ecological Markets Taskforce ## {#about}

The IWA Voluntary Ecological Markets Taskforce is a working group of the InterWork Alliance (IWA) that is focused on the develoment of standards for the creation of digital assets that represent the environmental benefits of voluntary ecological markets. 

The lifecycle of these assets has two main phases: origination and distribution. The origination phase is the process of creating the digital asset and the distribution phase is the process of distributing the digital asset to the market, e.g., marketplaces, exchanges, DeFi, etc.

This document and the specifications are aimed at the origination phase of the lifecycle.

## Disclaimer ## {#disclaimer}

While IWA encourages the implementation of the technical specifications by all entities for interoperability, those organiazations and individuals who contributed to the development of this document assume responsibility for any consequences or damages resulting directly or indirectly from the use of this document.

## License ## {#license}

The license can be found in [[#license]].

# Terminology # {#terminology}

: <dfn>DMRV</dfn>
:: Digital Measurement, Reporting and Verification

: <dfn>Ecological Project</dfn>
:: 
    An ecological project represents an individual or organization that will undertake a set of activities to achieve a set of outcomes. The outcomes of the project are typically environmental benefits that are measured by one or more of the project's Modular Benefit Projects (MBPs).

    An ecological project can have multiple Modular Benefit Projects (MBPs) that are intended to achieve set of outcomes following a specific Quality Standard, i.e., methodology.

    For example, an agricultural project may have a MBP for activities intended to remove carbon and another MBP for conserving biodiversity. This allows for an ecological project to have a single identity capable of having multiple types of credits issued to it.

: <dfn>Modular Benefit Project (MBP)</dfn>
::
    A Modular Benefit Project, MBP, has a defined scope and a defined set of activities that are intended to achieve a defined set of outcomes. The outcomes of the project are typically environmental benefits and follow a spcific Quality Standard, i.e. methodology.

    A MBP is scoped or bound to a quality standard/methodology that it follows along with a physical location or boundary that defines where the project activities occur. For example, a land based project would be scoped to an area/polygon on a map and an engineered sequestion based project would be scoped to a power plant/GPS/INSS.

    An ecological project can have multiple MBPs, but there cannot be another MBP using the same benefit type/quality standard/methodology and location.

: <dfn>Quality Standard</dfn>
:: A quality standard is a generic term for the methodology or protocol(s) that are used to validate a project and measure, report and verify the environmental benefits of an ecological project. The quality standard may include additional project validation requirements and be composed of different combinations of tools to calculate things like Additionally, etc.

: <dfn>Ecological Claim</dfn>
:: An ecological claim is a collection of the evidence data submitted according to the quality standard being followed by the MBP. An ecological claim is composed of one or more checkpoints.

: <dfn>Checkpoint</dfn>
:: A checkpoint is a collection of the evidence data submitted periodically to an ecological claim. The checkpoint is a cryptographic fingerprint of the evidence data to establish the provanance and integity of the evidence being submitted.

: <dfn>Span Data Package</dfn>
:: A span data package, SDP, is the data package file, i.e. .zip file, that contains the raw evidence data being submitted with a checkpoint.

: <dfn>SDP Manifest</dfn>
:: A span data package has a manifest.json file in the root of the .zip file that contains the metadata about the contents of the file as well as extensible metadata that is specific for the quality standard being followed.

: <dfn>Processed Claim</dfn>
:: A processed claim is a corresponding collection of checkpoint results that are generated by the validator.

: <dfn>Checkpoint Result</dfn>
:: A checkpoint result is paired with a corresponding checkpoint for the claim being processed and contains the results of the verification of the checkpoint.

: <dfn>Verification Contract</dfn>
:: A multiparty contract between the parties involved in the origination and digital MRV process. It defines the quality standard being followed, any monitoring/audit reports, etc.

: <dfn>Carbon Removal or Reduction Credit - CRU</dfn>
:: A CRU can represent either a carbon removal or reduction credit. The difference is that a carbon removal credit is a credit that is issued for the removal of carbon from the atmosphere, while a carbon reduction credit is a credit that is issued for the reduction of carbon emissions.


# Data Model # {#data-model}

This section specifies the data model for the entities involved in the origination process to conform with this specification.

The data model consists of the following major data types:

1. <{EcologicalProject}>: contains information identifying an individual or organization that will host one or more Modular Benefit Project(s).
2. <{ModularBenefitProject}>: contains information identifying a project that will host one or more Ecological Claim(s).
3. <{EcologicalClaim}>: contains information identifying a claim that will host one or more Checkpoint(s).
4. <{SpanDataPackage}>: contains information identifying a span data package that will host one or more Checkpoint(s).
5. <{ProcessedClaim}>: contains information identifying a processed claim that will host one or more Checkpoint Result(s).
6. <{VerificationContract}>: contains information identifying a verification contract that will host one or more Checkpoint Result(s).
7. <{CRU}>: contains information identifying a carbon removal or reduction credit. This is the cononical example of an ecological asset and can be replaced by a different asset type, e.g., biodiversity, water, etc.

Some data types, like the SpanDataPackage, support extensible metadata. This means that the data type can be extended to support additional data types that are specific to the quality standard being followed. For example, the SpanDataPackage data type can be extended to support the data types required by the Carbon Removal Protocol (CRP) or the Carbon Reduction Protocol (CRP).

## Data Type: <dfn element>EcologicalProject</dfn> ## {#dt-ecological-project}

`EcologicalProject` is a data type which represents the individual or organization that will host one or more ModularBenefitProject(s). 

This data type is used to represent a one to many relationship that can occur when an ecological project wishes to create multiple types of ecological assets and not have to establish an organiazational identity for each type of asset.

### Properties ### {#dt-ecological-project-properties}

An EcologicalProject has the following properties:

<figure id="ep-properties-table" dfn-type="element-attr" dfn-for="EcologicalProject">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>id</dfn> : [=Id=]
        <td>String
        <td>M
        <td>The ecological product identifier, See [[#dt-id]] for details.
      <tr>
        <td><dfn>name</dfn>
        <td>String
        <td>M
        <td>The name of the ecological project.
      <tr>
        <td><dfn>desciption</dfn> :
        <td>String
        <td>M
        <td>A brief description of the ecological project.
      <tr>
        <td><dfn>addresses</dfn> : [=Address=]
        <td>Array
        <td>M
        <td>The non-empty set of addresses. Each value can represent physical, mailing and or legal addresses.
      <tr>
        <td><dfn>owners</dfn> : [=OwnerIdSet=]
        <td>Array
        <td>M
        <td>The non-empty set of [=OwnerIds=]. Each of the values in the set is supposed to uniquely identify each owner of the project.
      <tr>
        <td><dfn>projectInformation</dfn> : <{ProjectInformation}>
        <td>Object
        <td>M
        <td>A set of attributes that classify the project <{ProjectInformation}>. See [[#dt-project-information]] for details.
      <tr>
        <td><dfn>modularBenefitProjects</dfn> : <{ModularBenefitProject}>[]
        <td>Array
        <td>M
        <td>A collection of modularBenefitProjects that belong to this ecological project.
  </table>
  <figcaption>Properties of data type EcologicalProject</figcaption>

</figure>

## Data Type: <dfn element>ProjectInformation</dfn> ## {#dt-project-information}

`ProjectInformation` is a data type that contains ecological project metadata that helps classify
and establish characteristics of the individual or organization that owns the ecological project.

### Properties ### {#dt-project-information-properties}

<figure id="pi-properties-table" dfn-type="element-attr" dfn-for="ProjectInformation">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>projectId</dfn> : [=Id=]
        <td>String
        <td>M
        <td>The parent ecological project identifier, See [[#dt-id]] for details.
      <tr>
        <td><dfn>country</dfn> : [=GeographicCountry=]
        <td>String
        <td>M
        <td>
            The country where the project is located. The value MUST be a valid ISO 3166-1 alpha-2 country code.
            See [[#dt-iso3166cc]] for details.
      <tr>
        <td><dfn>projectScale</dfn> : 
        <td>String
        <td>M
        <td>
            MUST be Micro, Small, Medium or Large
      <tr>
        <td><dfn>region</dfn> : [=Region=]
        <td>String
        <td>M
        <td>The region the project is located in.
      <tr>
        <td><dfn>informationLink</dfn> : [=VerifiedLink=]
        <td>String
        <td>M
        <td>A URI for information, i.e., webpage. See[[#dt-verified-link]]
      <tr>
        <td><dfn>mediaLinks</dfn> : [=VerifiedLink=]
        <td>Array
        <td>O
        <td>An array of optional media links. See[[#dt-verified-link]]
     
  </table>
  <figcaption>Properties of data type ProjectInformation</figcaption>
</figure>

## Data Type: <dfn element>ModularBenefitProject</dfn> ## {#dt-modular-benefit-project}

A ModularBenefitProject represents the actual project work that will generate benefits. 
It is bound to to Quality Standard and is where claims are issued from.

### Scope of a ModularBenefitProject ### {#dt-modular-benefit-project-scope}

Each ModularBenefitProject is scoped:
1. To a parent Ecological Project, which can host multiple modularBenefitProjects
2. Is bound or mapped to a QualityStandard that matches the MBP activities
3. Must be unique for its geographic footprint and Quality Standard

### Properties ### {#dt-modular-benefit-project-properties}

A ModularBenefitProject has the following properties:

<figure id="pf-carbonfootprint-properties-table" dfn-type="element-attr" dfn-for="CarbonFootprint">
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td>id : {{Id}}
        <td>String
        <td>M
        <td>Unique identifier for the MBP, See [[#dt-id]] for details.
      <tr>
        <td><dfn>projectid</dfn> : 
        <td>String
        <td>M
        <td>The unique identifier for the parent Ecological Project, See [[#dt-id]] for details.
      <tr>
        <td>name : 
        <td>String
        <td>M
        <td>The name of the ModularBenefitProject
      <tr>
        <td><dfn>classificationCategory</dfn> : 
        <td>String
        <td>M
        <td>The classification category of the ModularBenefitProject has values that can be:

            - Carbon Avoidance, where carbon is avoided from entering the atmosphere
            - Carbon Reduction, where carbon is reduced from entering the atmosphere
            - Carbon Removal, where carbon is removed from the atmosphere
            - Water, where water is conserved
            - undefined.

            This list will be expanded to include other categories, like biodiversity, in the future.
      <tr>
        <td><dfn>classificationMethod</dfn> : 
        <td>String
        <td>M
        <td>The method used to generate the benefit can be:

            - Natural, where the benefit is generated by natural processes
            - Technical, where the benefit is generated by technical processes, i.e. engineered.
            - Natural and Technical, where the benefit is generated by both natural and technical processes
      <tr>
        <td><dfn>ecologicalBenefitCategory</dfn> : [=un-sdgs=]
        <td>String
        <td>M
        <td>The ecological benefit category of the ModularBenefitProject. The value MUST be a valid UN Sustainable Development Goal (UN SDG) code. See [[#dt-un-sdgs]] for details.
      <tr>
        <td><dfn>projectScope</dfn> : [=project-scope=]
        <td>String
        <td>M
        <td>The scope of the MBP, maps to the scope of the Quality Standard. See [[#dt-project-scope]] for details.
      <tr>
        <td><dfn>projectType</dfn> : [=project-type=]
        <td>String
        <td>M
        <td>The type of the MBP, maps to the scope of the Quality Standard. See [[#dt-project-type]] for details.
      <tr>
        <td><dfn>arbId</dfn> : 
        <td>String
        <td>O
        <td>If present, this is the California Air Resources Board (ARB) project identifier.
      <tr>
        <td><dfn>firstYearIssuance</dfn> : 
        <td>String
        <td>O
        <td>If present, this is the year credits were first issued for the project.
      <tr>
        <td><dfn>registryProjectId</dfn> : 
        <td>String
        <td>O
        <td>If present, this is the Id assigned by the issuing registry for the project on their system.
      <tr>
        <td><dfn>geographicLocation</dfn> : [=GeographicLocation=]
        <td>Object
        <td>M
        <td>This is the geographic location of the project. See [[#dt-geographic-location]] for details.
      <tr>
        <td><dfn>developers</dfn> : [=Dev-Ids=]
        <td>Array
        <td>M
        <td>List of developers for the project. See [[#dt-id]] for details.
      <tr>
        <td><dfn>sponsors</dfn> : [=Sponsor-Ids=]
        <td>Array
        <td>M
        <td>List of sponsors, i.e., financiers, etc. for the project. See [[#dt-id]] for details.
      <tr>
        <td><dfn>claimSources</dfn> : [=Claim-sources=]
        <td>Object
        <td>M
        <td>A collection of claim evidence sources for the project, i.e., sensors, meters, applications, etc. See [[#dt-claim-source]] for details.
      <tr>
        <td><dfn>ecologicalClaims</dfn> : [=Ecological-claims=]
        <td>Object
        <td>M
        <td>A collection of ecological claims for the project. See [[#dt-ecological-claim]] for details.
      <tr>
        <td><dfn>validations</dfn> : [=Validations=]
        <td>Object
        <td>M
        <td>A collection of validations for the project. See [[#dt-validation]] for details.
    </table>
  <figcaption>Properties of data type CarbonFootprint</figcaption>

</figure>

## Data Type: <dfn element>ClaimSource</dfn> ## {#dt-claim-source}

A ClaimSource is a registered source of evidence data to support a claim. A claim source can be a device like
a sensor or meter, an application that collects user data or reference data like satellite imagery.

### Properties ### {#dt-ecological-claim-source-properties}

<figure>
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td>id : 
        <td>String
        <td>M
        <td>Unique identifier for the ClaimSource, See [[#dt-id]] for details.
      <tr>
        <td><dfn>mbpId</dfn> : [=Id=]
        <td>String
        <td>M
        <td>The unique identifier for the parent ModularBenefitProject, See [[#dt-id]] for details.
      <tr>
        <td>name : 
        <td>String
        <td>M
        <td>The unique identifier for the parent ModularBenefitProject, See [[#dt-id]] for details.
      <tr>
        <td><dfn>description</dfn> : 
        <td>String
        <td>M
        <td>Description of the source and other details like the type of data collected, the frequency of collection, etc.
      <tr>
        <td><dfn>sourceType</dfn> : 
        <td>String
        <td>M
        <td>Values can include sensor, meter, application, reference, etc.
      <tr>
        <td><dfn>quantity</dfn> : [=ClaimPeriod=]
        <td>Decimal
        <td>M
        <td>The estimated benefit quantity.
      <tr>
        <td><dfn>sourceIdentifier</dfn> : [=Co-benefit=]
        <td>string
        <td>M
        <td>this can be the unique identifier for the device, like a serial number, public key, etc.
    </table>
  <figcaption>Properties of data type EcologicalClaim</figcaption>

## Data Type: <dfn element>EcologicalClaim</dfn> ## {#dt-ecological-claim}

An EcologicalClaim represents the actual project work that will generate benefits through out the claim period
that is agreed to by the developer, VVB and Registry. EcologicalClaims are created by a ModularBenefitProject
and contains metadata about the claim period as well as a collection of checkpoints that are used to submitted
project evidence that is verified by the VVB or verification platform.

### Properties ### {#dt-ecological-claim-properties}

<figure>
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td>id : 
        <td>String
        <td>M
        <td>Unique identifier for the EcologicalClaim, See [[#dt-id]] for details.
      <tr>
        <td>mbpId : 
        <td>String
        <td>M
        <td>The unique identifier for the parent ModularBenefitProject, See [[#dt-id]] for details.
      <tr>
        <td><dfn>processedClaimId</dfn> : 
        <td>String
        <td>M
        <td>The unique identifier for the corrisponding processed claim that the verification platform uses to track the verification process and results of a claim. See [[#dt-id]] for details.
            The value can be null until a processed claim is created.
      <tr>
        <td><dfn>unit</dfn> : {{Unit}}
        <td>String
        <td>M
        <td>The unit of measurement/analysis of the project. See Data Type {{Unit}} for further information.
      <tr>
        <td>quantity : 
        <td>Decimal
        <td>M
        <td>The estimated benefit quantity.
      <tr>
        <td><dfn>co-benefits</dfn> : [=Co-benefit=]
        <td>Object
        <td>M
        <td>A collection of co-benefits associated with the EcologicalClaim. See [[#dt-un-sdgs]] for details.
      <tr>
        <td><dfn>checkpoints</dfn> : [=Checkpoints=]
        <td>Object
        <td>M
        <td>A collection of checkpoints for the EcologicalClaim. See [[#dt-ecological-claim-checkpoint]] for details.
    </table>
  <figcaption>Properties of data type EcologicalClaim</figcaption>

  ## Data Type: <dfn element>EcologicalClaimCheckpoint</dfn> ## {#dt-ecological-claim-checkpoint}

  The ecological claim checkpoint is a collection of evidence that is submitted by the developer to support
  the claim. The VVB or verification platform will review the evidence and provide a status of the evidence
  in a corresponding CheckpointResult in the processed claim.

  Checkpoints are used to periodically submit evidence on an agreed upon basis from the ModularBenefitProject
  to the VVB or verification platform. This enables the development of continous verification of the project
  and the ability to provide feedback to the developer on the status of the project and the evidence submitted
  before the end of the claim period.

  ### Properties ### {#dt-ecological-claim-checkpoint-properties}

  <figure>
    <table class="data">
      <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td>id : 
          <td>String
          <td>M
          <td>Unique identifier for the EcologicalClaimCheckpoint, See [[#dt-id]] for details.
        <tr>
          <td><dfn>claimId</dfn> : 
          <td>String
          <td>M
          <td>The unique identifier for the parent EcologicalClaim, See [[#dt-id]] for details.
        <tr>
          <td><dfn>claimSourceIds</dfn> : 
          <td>Array of Strings
          <td>M
          <td>A list of registered claim sources submitting evidence in this checkpoint. See [[#dt-id]] for details.
        <tr>
          <td><dfn>efBefore</dfn> : 
          <td>String
          <td>O
          <td>Environmental factor before activity - i.e., total emissions = 3 tCO2e
        <tr>
          <td><dfn>efAfter</dfn> : 
          <td>String
          <td>O
          <td>Environmental factor after activity - i.e., total emissions = 2 tCO2e.
        <tr>
          <td><dfn>checkpointDateRange</dfn> : [=DateRange=]
          <td>DateRange
          <td>M
          <td>The date range for the checkpoint. See [[#dt-date-range]] for details.
        <tr>
          <td><dfn>verifiedLinksToCheckpointData</dfn> : [=Co-benefit=]
          <td>Array
          <td>M
          <td>A collection of VerifiedLink objects that contain the evidence submitted by the MBP. See [[#dt-verified-link]] for details.
        <tr>
          <td><dfn>spanDataPackage</dfn> : [=Span-data-package=]
          <td>Object
          <td>M
          <td>The span data package for the checkpoint. See [[#dt-span-data-package]] for details.
      </table>
    <figcaption>Properties of data type EcologicalClaimCheckpoint</figcaption>

    ## Data Type: <dfn element>SpanDataPackage</dfn> ## {#dt-span-data-package}

    A span data package is an index and metadata file that is stored in the root of the SpanDataPackage file
    that is submitted with a checkpoint. It contains meta data about the evidence files contained in the package
    as well as extensible MRV data that is specific to the Quality Standard/Methodology the MBP is bound to.

    ### Properties ### {#dt-span-data-package-properties}

    NOT COMPLETE

    <figure>
      <table class="data">
        <thead>
          <tr>
            <th>Property
            <th>Type
            <th>Req
            <th>Specification
        <tbody>
          <tr>
            <td>id : 
            <td>String
            <td>M
            <td>Unique identifier for the SpanDataPackage, See [[#dt-id]] for details.
          <tr>
            <td><dfn>checkpointId</dfn> : 
            <td>String
            <td>M
            <td>The unique identifier for the parent EcologicalClaimCheckpoint, See [[#dt-id]] for details.
          <tr>
            <td><dfn>spanDataPackageId</dfn> : 
            <td>String
            <td>M
            <td>The unique identifier for the SpanDataPackage, See [[#dt-id]] for details.
          <tr>
            <td><dfn>spanDataPackageType</dfn> : 
            <td>String
            <td>M
            <td>The type of SpanDataPackage.
          <tr>
            <td><dfn>spanDataPackageVersion</dfn> : 
            <td>String
            <td>M
            <td>The version of the SpanDataPackage. 
          <tr>
            <td><dfn>spanDataPackageMetadata</dfn> : 
            <td>Object
            <td>M
            <td>The metadata for the SpanDataPackage. 
          <tr>
            <td><dfn>spanDataPackageIndex</dfn> : 
            <td>Object
            <td>M
            <td>The index for the SpanDataPackage.
          <tr>
            <td><dfn>spanDataPackageMRVData</dfn> : 
            <td>Object
            <td>M
            <td>The MRV data for the SpanDataPackage. 
      </table>
    <figcaption>Properties of data type SpanDataPackage</figcaption>
    
    ## Data Type: <dfn element>ProcessedClaim</dfn> ## {#dt-processed-claim}

    The verification platform or VVB creates a ProcessedClaim at the beginning of verification to track the verification process
    and support continous verification. A ProcessedClaim is paired with an EcologicalClaim and also contains
    a collection of CheckpointResults where results for each checkpoint verified are recorded.

    ### Properties ### {#dt-processed-claim-properties}

    <figure>
      <table class="data">
        <thead>
          <tr>
            <th>Property
            <th>Type
            <th>Req
            <th>Specification
        <tbody>
          <tr>
            <td>id : 
            <td>String
            <td>M
            <td>Unique identifier for the ProcessedClaim, See [[#dt-id]] for details.
          <tr>
            <td><dfn>verificationContractId</dfn> : 
            <td>String
            <td>M
            <td>The unique identifier for the parent VerificationContract, See [[#dt-id]] for details.
          <tr>
            <td><dfn>ecologicalClaimId</dfn> : 
            <td>String
            <td>M
            <td>The unique identifier for the paired EcologicalClaim, See [[#dt-id]] for details.
          <tr>
            <td><dfn>creditId</dfn> : 
            <td>String
            <td>O
            <td>The unique identifier for the credit, once issued, associated with the ProcessedClaim, See [[#dt-id]] for details.
          <tr>
            <td>unit : {{Unit}}
            <td>String
            <td>M
            <td>The unit of measurement/analysis of the project. See Data Type {{Unit}} for further information.
          <tr>
            <td>quantity : [=ClaimPeriod=]
            <td>Decimal
            <td>M
            <td>The verified benefit quantity after the verification period is complete.
           <tr>
            <td>co-benefits : [=Co-benefit=]
            <td>Object
            <td>M
            <td>A collection of co-benefits that should be attributed to the credit issued. See [[#dt-un-sdgs]] for details.
          <tr>
            <td><dfn>checkpointResults</dfn> : [=CheckpointResults=]
            <td>Object
            <td>M
            <td>A collection of checkpoint results for the ProcessedClaim. See [[#dt-checkpoint-result]] for details.
          <tr>
            <td><dfn>proposedAsset</dfn> : [=Status=]
            <td>Object
            <td>M
            <td>Since a processed claim is generic, it can contain the proposed asset type with values to the 
                issuing registry to use as a consideration.  For example, this field could contain as the proposed asset a CRU Token with the values that the verifier proposes after verfication.
                This allows the processed claim to be used as the source for any type of asset or credit.
        </table>
      <figcaption>Properties of data type ProcessedClaim</figcaption>

    ## Data Type: <dfn element>CheckpointResult</dfn> ## {#dt-checkpoint-result}

    A CheckpointResult is summary and verified links to verification results for the corresponding EcologicalClaimCheckpoint.
    The CheckpointResult enables continous verification of the project and the ability to provide feedback to the developer
    during the verification process.

    ### Properties ### {#dt-checkpoint-results-properties}

    <figure>
      <table class="data">
        <thead>
          <tr>
            <th>Property
            <th>Type
            <th>Req
            <th>Specification
        <tbody>
          <tr>
            <td>id : 
            <td>String
            <td>M
            <td>Unique identifier for the CheckpointResult, See [[#dt-id]] for details.
          <tr>
            <td>checkpointId : 
            <td>String
            <td>M
            <td>The unique identifier for the corresponding EcologicalClaimCheckpoint being processed, See [[#dt-id]] for details.
          <tr>
            <td><dfn>verifiedLinkToProcessDataResult</dfn> : [=VerifiedLink=]
            <td>Object
            <td>M
            <td>A VerifiedLink object that contain the processed data findings from verification. See [[#dt-verified-link]] for details.
          <tr>
            <td><dfn>dateRange</dfn> : [=DateRange=]
            <td>DateRange
            <td>M
            <td>The date range for the checkpoint being processed. See [[#dt-date-range]] for details.
          <tr>
            <td>efBefore : 
            <td>String
            <td>O
            <td>Verified environmental factor before activity - i.e., total emissions = 3 tCO2e
          <tr>
            <td>efAfter : 
            <td>String
            <td>O
            <td>Verified environmental factor after activity - i.e., total emissions = 2 tCO2e.
      </table>

    <figcaption>Properties of data type CheckpointResult</figcaption>

  <div class="issue" data-number="1">Incomplete data type placeholders below this point.</div>

  ## Data Type: <dfn element>VerificationContract</dfn> ## {#dt-verification-contract}

  INCOMPLETE
  
  A VerificationContract is a contract between a developer, verifier and registry that defines the 
  terms of the verification process. Shared properties of all the data entities in the validation and verification
  process are listed here, like the Quality Standard being used, the MRV Requirements, Claim Period, audit 
  schedule, etc. The VerificationContract is the indirect parent object for all the other data entities in the
  origination process.

  ### Properties ### {#dt-verification-contract-properties}

  <figure>
    <table class="data">
      <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td>id : 
          <td>String
          <td>M
          <td>Unique identifier for the VerificationContract, See [[#dt-id]] for details.
        <tr>
          <td><dfn>developerId</dfn> : 
          <td>String
          <td>M
          <td>The unique identifier for the developer, See [[#dt-id]] for details.
        <tr>
          <td><dfn>verifierId</dfn> : 
          <td>String
          <td>M
          <td>The unique identifier for the verifier, See [[#dt-id]] for details.
        <tr>
          <td><dfn>registryId</dfn> : 
          <td>String
          <td>M
          <td>The unique identifier for the registry, See [[#dt-id]] for details.
        <tr>
          <td><dfn>qualityStandard</dfn> : [=QualityStandard=]
          <td>Object
          <td>M
          <td>The quality standard being used for the verification. See [[#dt-quality-standard]] for details.
        <tr>
          <td><dfn>mrvRequirements</dfn> : [=MRVRequirements=]
          <td>Object
          <td>M
          <td>The MRV requirements being used for the verification. See [[#dt-mrv-requirements]] for details.
        <tr>
          <td><dfn>claimPeriod</dfn> : [=ClaimPeriod=]
          <td>Object
          <td>M
          <td>The claim period, date range, for the verification. See [[#dt-date-range]] for details.
        <tr>
          <td><dfn>auditSchedule</dfn> : [=AuditSchedule=]
          <td>Object
          <td>M
          <td>The audit schedule for the verification. See [[#dt-audit-schedule]] for details.
        
      </table>
    <figcaption>Properties of data type VerificationContract</figcaption>

  ## Data Type: <dfn element>CRU</dfn> ## {#dt-cru}

  The Carbon Removal or Reduction Unit, is a digital asset or token that services as a credit
  representing a quantity of CO2e. This is a non-financial, un-regulated, intangible digital asset that behavies
  like a commodity and is ready for distribution.

  This is one example of a specific type of token or credit that can represent the ecological or 
  environmental benefits that can be traded and retired to net down effective emissions for the beneficiary.

  Other types of credits can be created, and reuse all of the other data entities for the generic
  validation and verification process.

  ### Properties ### {#dt-cru-properties}

  <figure>
    <table class="data">
      <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td>id : 
          <td>String
          <td>M
          <td>Unique identifier for the CRU, See [[#dt-id]] for details.
        <tr>
          <td>registryId : 
          <td>String
          <td>M
          <td>The unique identifier for the registry, See [[#dt-id]] for details.
        <tr>
          <td>quantity : [=Quantity=]
          <td>String
          <td>M
          <td>The quantity of CO2e represented by the CRU. See [[#dt-decimal]] for details.
        <tr>
          <td>dateRange : [=DateRange=]
          <td>Object
          <td>M
          <td>The date range for the CRU. See [[#dt-date-range]] for details.
        <tr>
          <td>verificationContractId : 
          <td>String
          <td>M
          <td>The unique identifier for the verification contract, See [[#dt-id]] for details.
        <tr>
          <td><dfn>verificationContract</dfn> : [=VerificationContract=]
          <td>Object
          <td>M
          <td>The verification contract for the CRU. See [[#dt-verification-contract]] for details.
      </table>
    <figcaption>Properties of data type CRU</figcaption>

  ## Data Type: <dfn element>VerifiedLink</dfn> ## {#dt-verified-link}

  A VerifiedLink is a reference, URI or URL to an external data element along with a cryptographic
  fingerprint of the external data so that its integrity can be checked by any party.

  ### Properties ### {#dt-verifiedLink-properties}

  <figure>
    <table class="data">
      <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td>id : 
          <td>String
          <td>M
          <td>Unique identifier for the VerifiedLink, See [[#dt-id]] for details.
        <tr>
          <td><dfn>uri</dfn> : [=URI=]
          <td>String
          <td>M
          <td>The URI or URL of the external data element.
        <tr>
          <td><dfn>hash</dfn> : [=Hash=]
          <td>String
          <td>M
          <td>The cryptographic hash of the external data element.
      </table>
    <figcaption>Properties of data type VerifiedLink</figcaption>


## Data Type: <dfn element>GeographicLocation</dfn> ## {#dt-geographic-location}

The GeographicLocation is a data type that can represent a GNSS/GPS point location for projects like a facility or building
and or a geographic area, like a land project using a polygon.

### Properties ### {#dt-geographic-location-properties}

<figure>
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td><dfn>gnss</dfn> : [=GNSS=]
        <td>Object
        <td>O
        <td>The GNSS or GPS of a location. See [[#dt-gnss]] for details.
      <tr>
        <td><dfn>GeographicArea</dfn> : [=Area=]
        <td>Object
        <td>O
        <td>The geographic area of the location. See [[#dt-geographic-area]] for details.
  </table>
<figcaption>Properties of data type GeographicLocation</figcaption>

## Data Type: <dfn element>GNSS</dfn> ## {#dt-gnss}

GNSS or GPS allows for a project's location to be represented by a point location.

### Properties ### {#dt-gnss-properties}
<figure>
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td>id : 
        <td>String
        <td>M
        <td>Unique identifier for the GNSS, See [[#dt-id]] for details.
      <tr>
        <td><dfn>latitude</dfn> : [=Latitude=]
        <td>Decimal
        <td>M
        <td>The latitude of the location.
      <tr>
        <td><dfn>longitude</dfn> : [=Longitude=]
        <td>Decimal
        <td>M
        <td>The longitude of the location.
      <tr>
        <td><dfn>timing</dfn> : [=Timing=]
        <td>Decimal
        <td>O
        <td>The timing if used.
  </table>
<figcaption>Properties of data type GNSS</figcaption>

## Data Type: <dfn element>GeographicArea</dfn> ## {#dt-geographic-area}

The geographic area can be represented in geoJson or KML format as a minimalized Json string.

### Properties ### {#dt-geographic-area-properties}

Property GeoJsonOrKml is represented as a minimalized Json string, no spaces between tags or carrage returns.

## Data Type <dfn element>MRVRequirements</dfn> ## {#dt-mrv-requirements}

INCOMPLETE - needs description

### Properties ### {#dt-mrv-requirements-properties}

<figure>
  <table class="data">
    <thead>
      <tr>
        <th>Property
        <th>Type
        <th>Req
        <th>Specification
    <tbody>
      <tr>
        <td>id : 
        <td>String
        <td>M
        <td>Unique identifier for the MRVRequirements, See [[#dt-id]] for details.
  </table>
<figcaption>Properties of data type MRVRequirements</figcaption>


## Data Type: <dfn element>Validation</dfn> ## {#dt-validation}

Represents the validation steps and artifacts created in the validation phase of a project. These would include
Project Design Documents (PDD), etc.

### Properties ### {#dt-validation-properties}
<figure>
  <table class="data">
    <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td><dfn>validationDate</dfn> : {{Date}}
          <td>Date
          <td>M
          <td>The date of the validation. See [[#dt-date]] for details.
        <tr>
          <td><dfn>validatingParty</dfn> : 
          <td>String
          <td>M
          <td>The latitude of the location.
        <tr>
          <td><dfn>validationMethod</dfn> :
          <td>String
          <td>M
          <td>The validation method used for the project.
        <tr>
          <td><dfn>validationExpirationDate</dfn> : 
          <td>Date
          <td>M
          <td>The date of the validation expires. See [[#dt-date]] for details.
        <tr>
          <td><dfn>validationSteps</dfn> : 
          <td>Array
          <td>M
          <td>A collection of Validation Steps. See [[#dt-validation-step]] for details.
    </table>
<figcaption>Properties of data type Validation</figcaption>

## Data Type: <dfn element>ValidationStep</dfn> ## {#dt-validation-step}

A validation step is a single step in the validation process, a validation process can be composed of multiple steps
each step can generate its own artifact like a Project Design Document.

### Properties ### {#dt-validation-step-properties}

<figure>
  <table class="data">
    <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td><dfn>validationStepName</dfn> : 
          <td>String
          <td>M
          <td>The name of the validation step.
        <tr>
          <td><dfn>validationStepDescription</dfn> : 
          <td>String
          <td>M
          <td>The description of the validation step.
        <tr>
          <td><dfn>stepStatus</dfn> : {{Status}}
          <td>Status
          <td>M
          <td>The status of the validation step. See [[#dt-status]] for details.
        <tr>
          <td><dfn>stepDocumentLink</dfn> : {{VerifiedLink}}
          <td>VerifiedLink
          <td>M
          <td>The artifact generated by the validation step. See [[#dt-verified-link]] for details.
    </table>

## Data Type: <dfn element>DateRange</dfn> ## {#dt-date-range}

A date range contains a start and end date, with optional timestamps for precision.

### Properties ### {#dt-date-range-properties}

A StartDate as type {{DatePoint}}
An EndDate as type {{DatePoint}}

## Data Type: <dfn element>DatePoint</dfn> ## {#dt-date-point}

A DatePoint combines a date with an optional UTC Timestamp for precision if needed.

### Properties ### {#dt-date-point-properties}

A Date as type {{Date}}
A Timestamp as a UTC Timestamp

## Data Type: <dfn element>Date</dfn> ## {#dt-date}

Represents a date with discrete values for month, day and year.

### Properties ### {#dt-date-properties}

<figure>
  <table class="data">
    <thead>
        <tr>
          <th>Property
          <th>Type
          <th>Req
          <th>Specification
      <tbody>
        <tr>
          <td><dfn>year</dfn> : {{Year}}
          <td>Integer
          <td>M
          <td>The year of the date. 
        <tr>
          <td><dfn>month</dfn> : {{Month}}
          <td>Month
          <td>M
          <td>The month of the date. See [[#dt-month]] for details.
        <tr>
          <td><dfn>day</dfn> : {{Day}}
          <td>Integer
          <td>M
          <td>The day of the date. 
    </table>
    <figcaption>Properties of data type Date</figcaption>

## Data Type: <dfn enum>Month</dfn> ## {#dt-month}

Months of the Year

<dl dfn-type="enum-value" dfn-for="Month">

: <dfn>January</dfn>
:: for January

: <dfn>February</dfn>
:: for February

: <dfn>March</dfn>
:: for March

: <dfn>April</dfn>
:: for April

: <dfn>May</dfn>
:: for May

: <dfn>June</dfn>
:: for June

: <dfn>July</dfn>
:: for July

: <dfn>August</dfn>
:: for August

: <dfn>September</dfn>
:: for September

: <dfn>October</dfn>
:: for October

: <dfn>November</dfn>
:: for November

: <dfn>December</dfn>
:: for December

</dl>

## Data Type: <dfn enum>AuditSchedule</dfn> ## {#dt-audit-schedule}

Audit schedule options: INCOMPLETE

<dl dfn-type="enum-value" dfn-for="AuditSchedule">

: <dfn>ANNUAL</dfn>
:: for annual audits

</dl>

## Data Type: <dfn enum>Co-Benefit</dfn> ## {#dt-un-sdgs}

Co-benefits currently map to the UN SDGs:

<dl dfn-type="enum-value" dfn-for="Co-Benefit">

: <dfn>NO_CATEGORY</dfn>
:: for No Category

: <dfn>NO_POVERTY</dfn>
:: for No Poverty

: <dfn>ZERO_HUNGER</dfn>
:: for Zero Hunger

: <dfn>GOOD_HEALTH_AND_WELL_BEING</dfn>
:: for Good Health and Well Being

: <dfn>QUALITY_EDUCATION</dfn>
:: for Quality Education

: <dfn>GENDER_EQUALITY</dfn>
:: for Gender Equality

: <dfn>CLEAN_WATER_AND_SANITATION</dfn>
:: for Clean Water and Sanitation

: <dfn>AFFORDABLE_AND_CLEAN_ENERGY</dfn>
:: for Affordable and Clean Energy

: <dfn>DECENT_WORK_AND_ECONOMIC_GROWTH</dfn>
:: for Decent Work and Economic Growth

: <dfn>INDUSTRY_INNOVATION_AND_INFRASTRUCTURE</dfn>
:: for Industry Innovation and Infrastructure

: <dfn>REDUCED_INEQUALITIES</dfn>
:: for Reduced Inequalities

: <dfn>SUSTAINABLE_CITIES_AND_COMMUNITIES</dfn>
:: for Sustainable Cities and Communities

: <dfn>RESPONSIBLE_CONSUMPTION_AND_PRODUCTION</dfn>
:: for Responsible Consumption and Production

: <dfn>CLIMATE_ACTION</dfn>
:: for Climate Action

: <dfn>LIFE_BELOW_WATER</dfn>
:: for Life Below Water

: <dfn>LIFE_ON_LAND</dfn>
:: for Life on Land

: <dfn>PEACE_JUSTICE_AND_STRONG_INSTITUTIONS</dfn>
:: for Peace Justice and Strong Institutions

: <dfn>PARTNERSHIPS_FOR_THE_GOALS</dfn>
:: for Partnerships for the Goals

</dl>

### Properties ### {#dt-co-benefit-properties}

For each Co-benefit there is a:
: description
:: a string describing the co-benefit and how it applies

: <dfn>Rating</dfn>
:: an optional placeholder for a number rating

## Data Type: <dfn enum>ProjectScope</dfn> ## {#dt-project-scope}

Project scope helps classify projects.

<dl dfn-type="enum-value" dfn-for="ProjectScope">

: <dfn>OTHER</dfn>
:: for Other

: <dfn>AGRICULTURE</dfn>
:: for Agriculture

: <dfn>CARBON_CAPTURE_AND_STORAGE</dfn>
:: for Carbon Capture and Storage

: <dfn>CHEMICAL_PROCESSES</dfn>
:: for Chemical Processes

: <dfn>FORESTRY_AND_LAND_USE</dfn>
:: for Forestry and Land Use

: <dfn>HOUSEHOLD_AND_COMMUNITY</dfn>
:: for Household and Community

: <dfn>INDUSTRIAL_MANUFACTURING</dfn>
:: for Industrial Manufacturing

: <dfn>RENEWABLE_ENERGY</dfn>
:: for Renewable Energy

: <dfn>TRANSPORTATION</dfn>
:: for Transportation

: <dfn>WASTE_MANAGEMENT</dfn>
:: for Waste Management

</dl>

## Data Type: <dfn enum>ProjectType</dfn> ## {#dt-project-type}

Project Type helps to classify a project.

<dl dfn-type="enum-value" dfn-for="ProjectType">
 
: <dfn>ADVANCED_REFRIDERANTS</dfn>
:: for Advanced Refridierants

: <dfn>AFFORESTATION_REFORESTATION</dfn>
:: for Afforestation Reforestation

: <dfn>ALUMINUM_SMELTERS_EMISSION_REDUCTIONS</dfn>
:: for Aluminum Smelters Emission Reductions

: <dfn>AVOIDED_FOREST_CONVERSION</dfn>
:: for Avoided Forest Conversion

: <dfn>AVOIDED_GRASSLAND_CONVERSION</dfn>
:: for Avoided Grassland Conversion

: <dfn>BYCYCLES</dfn>
:: for Bicycles

: <dfn>BIODIGESTERS</dfn>
:: for Biodigesters

: <dfn>BIOMASS</dfn>
:: for Biomass

: <dfn>BRICK_MANUFACTURING_EMISSION_REDUCTIONS</dfn>
:: for Brick Manufacturing Emission Reductions

: <dfn>BUNDLED_COMPOST_PRODUCTION_AND_SOIL_APPLICATION</dfn>
:: for Bundled Compost Production and Soil Application

: <dfn>BUNDLED_ENERGY_EFFICIENCY</dfn>
:: for Bundled Energy Efficiency

: <dfn>CARBON_CAPTURE_AND_ENHANCED_OIL_RECOVERY</dfn>
:: for Carbon Capture and Enhanced Oil Recovery

: <dfn>CARBON_CAPTURE_IN_CEMENT</dfn>
:: for Carbon Capture in Cement

: <dfn>CARBON_CAPTURE_IN_PLASTIC</dfn>
:: for Carbon Capture in Plastic

: <dfn>CLEAN_WATER</dfn>
:: for Clean Water

: <dfn>COMMUNITY_BOREHOLES</dfn>
:: for Community Boreholes

: <dfn>COMPOST_ADDITION_TO_RANGELAND_SOIL</dfn>
:: for Compost Addition to Rangeland Soil

: <dfn>COMPOSTING</dfn>
:: for Composting

: <dfn>COOKSTOVES</dfn>
:: for Cookstoves

: <dfn>ELECTRIC_VEHICLES_AND_CHARGING</dfn>
:: for Electric Vehicles and Charging

: <dfn>ENERGY_EFFICIENCY</dfn>
:: for Energy Efficiency

: <dfn>FEED_ADDITIVES</dfn>
:: for Feed Additives

: <dfn>FLEET_EFFICIENCY</dfn>
:: for Fleet Efficiency

: <dfn>FUEL_SWITCHING</dfn>
:: for Fuel Switching

: <dfn>FUEL_TRANSPORT</dfn>
: for Fuel Transport

: <dfn>GEOTHERMAL</dfn>
:: for Geothermal

: <dfn>GRID_EXPANSION_AND_MINI_GRIDS</dfn>
:: for Grid Expansion and Mini Grids

: <dfn>HFC_REFRIGERANT_RECLAMATION</dfn>
:: for HFC Refrigerant Reclamation

: <dfn>HFC_REPLACEMENT_IN_FOAM_PRODUCTION</dfn>
:: for HFC Replacement in Foam Production

: <dfn>HFC23_DESTRUCTION</dfn>
:: for HFC23 Destruction

: <dfn>HYDROPOWER</dfn>
:: for Hydropower

: <dfn>IMPROVED_FOREST_MANAGEMENT</dfn>
:: for Improved Forest Management

: <dfn>IMPROVED_IRRIGATION_MANAGEMENT</dfn>
:: for Improved Irrigation Management

: <dfn>LANDFILL_METHANE</dfn>
:: for Landfill Methane

: <dfn>LEAK_DETECTION_AND_REPAIR_IN_GAS_SYSTEMS</dfn>
:: for Leak Detection and Repair in Gas Systems

: <dfn>LIGHTING</dfn>
:: for Lighting

: <dfn>MANURE_METHANE_DIGESTER</dfn>
:: for Manure Methane Digester

: <dfn>MASS_TRANSIT</dfn>
:: for Mass Transit

: <dfn>METHANE_RECOVERY_IN_WASTEWATER</dfn>
:: for Methane Recovery in Wastewater

: <dfn>MINE_METHANE_CAPTURE</dfn>
:: for Mine Methane Capture

: <dfn>MINERALIZATION</dfn>
:: for Mineralization

: <dfn>N20_DESTRUCTION_IN_ADIPIC_ACID_PRODUCTION</dfn>
:: for N20 Destruction in Adipic Acid Production

: <dfn>N20_DESTRUCTION_IN_NITRIC_ACID_PRODUCTION</dfn>
:: for N20 Destruction in Nitric Acid Production

: <dfn>NATURAL_GAS_ELECTRICITY_GENERATION</dfn>
:: for Natural Gas Electricy Generation

: <dfn>NITROGEN_MANAGEMENT</dfn>
:: for Nitrogen Management

: <dfn>OIL_RECYCLING</dfn>
:: for Oil Recycling

: <dfn>OZONE_DEPLETING_SUBSTANCES_RECOVERY_AND_DESTRUCTION</dfn>
:: for Ozone Depleting Substances Recovery and Destruction

: <dfn>PNEUMATIC_RETROFIT</dfn>
:: for Pneumatic Retrofit

: <dfn>PROPYLENE_OXIDE_PRODUCTION</dfn>
:: for Propylene Oxide Production

: <dfn>RE_BUNDLED</dfn>
:: for Re-Bundled

: <dfn>REDD_PLUS</dfn>
:: for REDD+

: <dfn>REFRIGERANT_LEAK_DETECTION</dfn>
:: for Refrigerant Leak Detection

: <dfn>RICE_EMISSION_REDUCTIONS</dfn>
:: for Rice Emission Reductions

: <dfn>SF6_REPLACEMENT</dfn>
:: for SF6 Replacement

: <dfn>SHIPPING</dfn>
:: for Shipping

: <dfn>SOLAR_CENTRALIZED</dfn>
:: for Solar Centralized

: <dfn>SOLAR_DISTRIBUTED</dfn>
:: for Solar Distributed

: <dfn>SOLAR_LIGHTING</dfn>
:: for Solar Lighting

: <dfn>SOLAR_WATER_HEATERS</dfn>
:: for Solar Water Heaters

: <dfn>SOLID_WASTE_SEPARATION</dfn>
:: for Solid Waste Separation

: <dfn>SUSTAINABLE_AGRICULTURE</dfn>
:: for Sustainable Agriculture

: <dfn>SUSTAINABLE_GRASSLAND_MANAGEMENT</dfn>
:: for Sustainable Grassland Management

: <dfn>TRUCK_STOP_ELECTRIFICATION</dfn>
:: for Truck Stop Electrification

: <dfn>UNIVERSITY_CAMPUS_EMISSION_REDUCTIONS</dfn>
:: for University Campus Emission Reductions

: <dfn>WASTE_DIVERSION</dfn>
:: for Waste Diversion

: <dfn>WASTE_GAS_RECOVERY</dfn>
:: for Waste Gas Recovery

: <dfn>WASTE_HEAT_RECOVERY</dfn>
:: for Waste Heat Recovery

: <dfn>WASTE_INCINERATION</dfn>
:: for Waste Incineration

: <dfn>WASTE_RECYCLING</dfn>
:: for Waste Recycling

: <dfn>WEATHERIZATION</dfn>
:: for Weatherization

: <dfn>WETLAND_RESTORATION</dfn>
:: for Wetland Restoration

: <dfn>WIND</dfn>
:: for Wind

</dl>

## Data Type: <dfn enum>MeasurementSpecification</dfn> ## {#dt-measurement-specification}

The MRV measurement specification used.

<dl dfn-type="enum-value" dfn-for="MeasurementSpecification">

: <dfn>ISO_14064</dfn>
:: for ISO 14064

: <dfn>ISO_14064_1</dfn>
:: for ISO 14064-1

: <dfn>ISO_14064_2</dfn>
:: for ISO 14064-2

</dl>

## Data Type: <dfn enum>Status</dfn> ## {#dt-status}

A generic status indicator used for credits.

<dl dfn-type="enum-value" dfn-for="Status">

: <dfn>ACTIVE</dfn>
:: for Active

: <dfn>INACTIVE</dfn>
:: for Inactive

: <dfn>REVOKED</dfn>
:: for Revoked

: <dfn>RETIRED</dfn>
:: for Retired

</dl>

## Data Type: <dfn enum>QualityStandard</dfn> ## {#dt-quality-standard}

The list of Quality Standard, e.g., methodology or protocols.

<dl dfn-type="enum-value" dfn-for="QualityStandard">

: <dfn>GS_VER</dfn>
:: for Gold Standard Verified Emissions Reduction

: <dfn>VCS</dfn>
:: for Cerified Carbon Standard generates VCUs

: <dfn>VOS</dfn>
:: for Voluntary Offset Standard

: <dfn>CCB</dfn>
:: for Climate

: <dfn>GREEN_E</dfn>
:: for US renewable energy

: <dfn>CDM</dfn>
:: for Compliance: Clean Development Mechanism generates CERs

: <dfn>JI</dfn>
:: for Compliance: Joint Implementation - Kyoto binding targets generation of ERUs

: <dfn>EUA</dfn>
:: for Compliance: European Union Allowances

: <dfn>PENDING</dfn>
:: for Other or in Development

</dl>

## Data Type: <dfn element>Replacement</dfn> ## {#dt-replacement}

Replacement is used when a credit is replacing a revoked credit.

### Properties ### {#dt-replacement-properties}

<figure>
  <table class="data">
    <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Req
      <th>Specification
    <tbody>
      <tr>
        <td><dfn>replacesId</dfn> : 
        <td>String
        <td>M
        <td>The Id of the revoked credit being replaced.
      <tr>
        <td><dfn>replacementDate</dfn> : {{Date}}
        <td>Object
        <td>M
        <td>The date of the replacement.
      <tr>
        <td><dfn>notes</dfn> :
        <td>String
        <td>O
        <td>Optional notes about the revokation and replacement
    </table>
    <figurecaption>Figure 1: <a>Replacement</a> Properties</figurecaption>

## Data Type: <dfn enum>CorrespondingAdjustment</dfn> ## {#dt-corresponding-adjustment}

Status of a credits corresponding adjustment status.

<dl dfn-type="enum-value" dfn-for="CorrespondingAdjustment">

: <dfn>NONE</dfn>
:: for there is no Corresponding adjustment associated with this credit. Meaning the country of origin for the credit will not subtract the credit from their Nationally Determined Contributions (NDCs)if the credit is exported and consumed in a different country.

: <dfn>PARIS_AGREEMENT_COMPLIANT</dfn>
:: for there is verified Corresponding adjustment associated with this credit. Meaning the country of origin for the credit will not count the credit in their Nationally Determined Contributions (NDCs)so the credit can be exported and count in a different country's NDC.

: <dfn>PARIS_AGREEMENT_PENDING_COMPLIANCE</dfn>
:: for there is corresponding adjustment associated with this credit; that is pending verification. Meaning the country of origin for the credit will not count the credit in their Nationally Determined Contributions (NDCs)so the credit can be exported and count in a different country's NDC.

</dl>

## Data Type: <dfn element>PACompliance</dfn> ## {#dt-pa-compliance}

Details about a credit's Paris Agreement Compliance.

### Properties ### {#dt-pa-compliance-properties}

<figure>
  <table class="data">
    <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Req
      <th>Specification
    <tbody>
      <tr>
        <td><dfn>correspondingAdjustment</dfn> : {{CorrespondingAdjustment}}
        <td>String
        <td>M
        <td>The status of the corresponding adjustment.
      <tr>
        <td><dfn>letterOfApproval</dfn> : {{VerifiedLink}}
        <td>Object
        <td>O
        <td>Optional verified link to the letter of approval. See [[#dt-verified-link]] for details.
    </table>
    <figurecaption>Figure 1: <a>PACompliance</a> Properties</figurecaption>

## Data Type: <dfn element>ClimateLabel</dfn> ## {#dt-climate-label}

Climate labels can be attached to credits.

### Properties ### {#dt-climate-label-properties}

<figure>
  <table class="data">
    <thead>
    <tr>
      <th>Property
      <th>Type
      <th>Req
      <th>Specification
    <tbody>
      <tr>
        <td>id : 
        <td>String
        <td>M
        <td>The label id.
      <tr>
        <td>name :
        <td>String
        <td>M
        <td>The name of the label.
      <tr>
        <td>description :
        <td>O
        <td>Optional description of the label.
    </table>
    <figurecaption>Figure 1: <a>ClimateLabel</a> Properties</figurecaption>

## Data Type: <dfn enum>Unit</dfn> ## {#dt-unit}

Unit is the enumeration of accepted declared units with values

<dl dfn-type="enum-value" dfn-for="Unit">

: <dfn>liter</dfn>
:: for unit liter

: <dfn>kilogram</dfn>
:: for unit kilogram

: <dfn>cubic meter</dfn>
:: for cubic meter

: <dfn>kilowatt hour</dfn>
:: for kilowatt hour

: <dfn>megajoule</dfn>
:: for megajoule

: <dfn>ton kilometer</dfn>
:: for ton kilometer

: <dfn>square meter</dfn>
:: for square meter

</dl>


### JSON Representation ### {#dt-unit-json}

The value of each {{Unit}} MUST be encoded as a JSON String.

## Data Type: <dfn>Decimal</dfn> ## {#dt-decimal}

A dotted-decimal number. 

Example values:
<div class=example>
    - `10`
    - `42.12`
    - `-182.84`
</div>

### JSON Representation ### {#dt-decimal-json}

Each Decimal MUST be encoded as a JSON String.

## Data Type: <dfn>String</dfn> ## {#dt-string}

A regular UTF-8 String.

### JSON Data Representation ### {#dt-string-json}

Each [=String=] MUST be encoded as a JSON String.

## Data Type: <dfn>Id</dfn> ## {#dt-id}

A Id MUST either be a UUID v4 as specified in [[!RFC4122]].

or a unique key that can be represented as a string.


### JSON Representation ### {#dt-pfid-json}

Each PfId MUST be encoded as a JSON String, see [[#dt-string-json]] for details.

Example JSON string value: 

<div class=example>
```json
"f4b1225a-bd44-4c8e-861d-079e4e1dfd69"
```
</div>

## Data Type: <dfn>ISO3166CC</dfn> ## {#dt-iso3166cc}

An ISO 3166-2 alpha-2 country code.

Example value for tue alpha-2 country code of the United States:
<div class=example>
  `US`
</div>

### JSON Representation ### {#dt-iso3166cc-json}

Each [=ISO3166CC=] MUST be encoded as a JSON String.
